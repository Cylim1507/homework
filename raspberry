import pymysql
import serial
from datetime import datetime
import time

# --- Configuration ---
DB_HOST = "localhost"
DB_USER = "kali"
DB_PASSWORD = ""
DB_NAME = "assignment1"

SERIAL_PORT = '/dev/ttyS0'
BAUD_RATE = 9600

# --- Database logging function ---
def log_to_db(uid, status):
    try:
        connection = pymysql.connect(
            host=DB_HOST,
            user=DB_USER,
            password=DB_PASSWORD,
            database=DB_NAME
        )

        with connection.cursor() as cursor:
            sql = "INSERT INTO logs (uid, status, timestamp) VALUES (%s, %s, %s)"
            timestamp = datetime.now().strftime('%Y-%m-%d %H:%M:%S')
            cursor.execute(sql, (uid, status, timestamp))

        connection.commit()
        print(f"✅ Logged: UID={uid}, STATUS={status}, TIME={timestamp}")

    except pymysql.MySQLError as e:
        print(f"❌ MySQL Error: {e}")

    finally:
        if connection:
            connection.close()

# --- Main loop ---
def main():
    try:
        print("🔌 Connecting to serial...")
        ser = serial.Serial(SERIAL_PORT, BAUD_RATE, timeout=1)

        # Soft reset Arduino
        ser.setDTR(False)
        time.sleep(1)
        ser.flushInput()
        ser.setDTR(True)
        time.sleep(2)
        print("📡 Listening for RFID scans...")

        last_activity_time = time.time()
        door_unlocked = False

        while True:
            line = ser.readline().decode('utf-8').strip()
            current_time = time.time()

            if line.startswith("LOG:"):
                try:
                    parts = line.split(",")
                    uid = parts[0][4:].strip()
                    status = parts[1].strip()

                    log_to_db(uid, status)

                    # 🔄 Edge analytics: Update state
                    last_activity_time = current_time
                    door_unlocked = (status == "UNLOCKED")

                    # Buzz briefly for RFID scan
                    ser.write(b'S\n')  # Tell Arduino to buzz for 0.5s

                except Exception as e:
                    print(f"⚠️ Failed to parse line: {line} → {e}")

            # 🔄 Edge analytics: Check inactivity timeout
            elif door_unlocked and (current_time - last_activity_time >= 10):
                print("🚨 Pad is empty for 10 seconds while unlocked → TRIGGER BUZZER!")
                ser.write(b'F\n')  # Tell Arduino to buzz longer
                door_unlocked = False  # Prevent repeated buzz

            time.sleep(0.1)  # Prevent high CPU usage

    except serial.SerialException as e:
        print(f"❌ Serial port error: {e}")

    except KeyboardInterrupt:
        print("\n🛑 Program terminated by user.")

if __name__ == "__main__":
    main()
